"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_analyticsService_ts";
exports.ids = ["_ssr_src_lib_analyticsService_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/analyticsService.ts":
/*!*************************************!*\
  !*** ./src/lib/analyticsService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalyticsService: () => (/* binding */ AnalyticsService),\n/* harmony export */   analyticsService: () => (/* binding */ analyticsService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./src/lib/supabase.ts\");\n\nclass AnalyticsService {\n    constructor(){\n        // Generate a session ID for this browser session\n        this.sessionId = this.getOrCreateSessionId();\n    }\n    getOrCreateSessionId() {\n        // Check if we're in a browser environment\n        if (true) {\n            // Server-side: generate a temporary session ID\n            return `server_session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        }\n        let sessionId = localStorage.getItem('analytics_session_id');\n        if (!sessionId) {\n            sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n            localStorage.setItem('analytics_session_id', sessionId);\n        }\n        return sessionId;\n    }\n    /**\n   * Track a user interaction event\n   */ async trackEvent(eventType, eventData = {}, userId) {\n        try {\n            const event = {\n                user_id: userId,\n                event_type: eventType,\n                event_data: eventData,\n                session_id: this.sessionId,\n                ip_address: null,\n                user_agent: navigator.userAgent\n            };\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_events').insert(event);\n            if (error) {\n                console.warn('Failed to track analytics event:', error);\n            }\n        } catch (error) {\n            console.warn('Analytics tracking failed:', error);\n        }\n    }\n    /**\n   * Track model performance metrics\n   */ async trackModelPerformance(userId, conversationId, model, metrics) {\n        try {\n            const performance = {\n                user_id: userId,\n                conversation_id: conversationId,\n                model,\n                prompt_tokens: metrics.promptTokens,\n                completion_tokens: metrics.completionTokens,\n                total_tokens: metrics.totalTokens,\n                response_time_ms: metrics.responseTimeMs,\n                cost_cents: metrics.costCents,\n                success: metrics.success,\n                error_message: metrics.errorMessage\n            };\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('model_performance').insert(performance);\n            if (error) {\n                console.warn('Failed to track model performance:', error);\n            }\n        } catch (error) {\n            console.warn('Model performance tracking failed:', error);\n        }\n    }\n    /**\n   * Update user engagement metrics\n   */ async updateUserEngagement(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // First, try to update existing record\n            const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').update({\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('user_id', userId).eq('date', today);\n            if (updateError) {\n                // If no existing record, create one\n                const engagement = {\n                    user_id: userId,\n                    date: today,\n                    messages_sent: 0,\n                    conversations_created: 0,\n                    session_duration_minutes: 0,\n                    models_used: [],\n                    features_used: [],\n                    last_activity: new Date().toISOString()\n                };\n                const { error: insertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').insert(engagement);\n                if (insertError) {\n                    console.warn('Failed to create user engagement record:', insertError);\n                }\n            }\n        } catch (error) {\n            console.warn('User engagement update failed:', error);\n        }\n    }\n    /**\n   * Increment message count for user\n   */ async incrementMessageCount(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current value\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('messages_sent').eq('user_id', userId).eq('date', today).single();\n            const currentCount = currentData?.messages_sent || 0;\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                messages_sent: currentCount + 1,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to increment message count:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Message count increment failed:', error);\n        }\n    }\n    /**\n   * Increment conversation count for user\n   */ async incrementConversationCount(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current value\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('conversations_created').eq('user_id', userId).eq('date', today).single();\n            const currentCount = currentData?.conversations_created || 0;\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                conversations_created: currentCount + 1,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to increment conversation count:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Conversation count increment failed:', error);\n        }\n    }\n    /**\n   * Track model usage for user\n   */ async trackModelUsage(userId, model) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current models_used array\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('models_used').eq('user_id', userId).eq('date', today).single();\n            if (fetchError && fetchError.code !== 'PGRST116') {\n                console.warn('Failed to fetch current model usage:', fetchError);\n                return;\n            }\n            const currentModels = currentData?.models_used || [];\n            const updatedModels = Array.from(new Set([\n                ...currentModels,\n                model\n            ]));\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                models_used: updatedModels,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to track model usage:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Model usage tracking failed:', error);\n        }\n    }\n    /**\n   * Track feature usage\n   */ async trackFeatureUsage(userId, feature) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current features_used array\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('features_used').eq('user_id', userId).eq('date', today).single();\n            if (fetchError && fetchError.code !== 'PGRST116') {\n                console.warn('Failed to fetch current feature usage:', fetchError);\n                return;\n            }\n            const currentFeatures = currentData?.features_used || [];\n            const updatedFeatures = Array.from(new Set([\n                ...currentFeatures,\n                feature\n            ]));\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                features_used: updatedFeatures,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to track feature usage:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Feature usage tracking failed:', error);\n        }\n    }\n    /**\n   * Get analytics data for admin dashboard\n   */ async getAnalyticsData(dateRange) {\n        try {\n            // Get daily metrics\n            const { data: metrics, error: metricsError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_metrics').select('*').gte('date', dateRange.start).lte('date', dateRange.end).order('date', {\n                ascending: false\n            });\n            if (metricsError) throw metricsError;\n            // Get recent events\n            const { data: events, error: eventsError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_events').select(`\n          *,\n          users:user_id (\n            email,\n            full_name\n          )\n        `).gte('created_at', dateRange.start).lte('created_at', dateRange.end).order('created_at', {\n                ascending: false\n            }).limit(100);\n            if (eventsError) throw eventsError;\n            // Get model performance data\n            const { data: performance, error: performanceError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('model_performance').select('*').gte('created_at', dateRange.start).lte('created_at', dateRange.end).order('created_at', {\n                ascending: false\n            });\n            if (performanceError) throw performanceError;\n            // Get user engagement data\n            const { data: engagement, error: engagementError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select(`\n          *,\n          users:user_id (\n            email,\n            full_name\n          )\n        `).gte('date', dateRange.start).lte('date', dateRange.end).order('date', {\n                ascending: false\n            });\n            if (engagementError) throw engagementError;\n            return {\n                metrics: metrics || [],\n                events: events || [],\n                performance: performance || [],\n                engagement: engagement || []\n            };\n        } catch (error) {\n            console.error('Failed to fetch analytics data:', error);\n            throw error;\n        }\n    }\n}\nconst analyticsService = new AnalyticsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/analyticsService.ts\n");

/***/ })

};
;