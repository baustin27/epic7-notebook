"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_analyticsService_ts"],{

/***/ "(app-pages-browser)/./src/lib/analyticsService.ts":
/*!*************************************!*\
  !*** ./src/lib/analyticsService.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalyticsService: () => (/* binding */ AnalyticsService),\n/* harmony export */   analyticsService: () => (/* binding */ analyticsService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nclass AnalyticsService {\n    getOrCreateSessionId() {\n        // Check if we're in a browser environment\n        if (false) {}\n        let sessionId = localStorage.getItem('analytics_session_id');\n        if (!sessionId) {\n            sessionId = \"session_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n            localStorage.setItem('analytics_session_id', sessionId);\n        }\n        return sessionId;\n    }\n    /**\n   * Track a user interaction event\n   */ async trackEvent(eventType) {\n        let eventData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, userId = arguments.length > 2 ? arguments[2] : void 0;\n        try {\n            const event = {\n                user_id: userId,\n                event_type: eventType,\n                event_data: eventData,\n                session_id: this.sessionId,\n                ip_address: null,\n                user_agent: navigator.userAgent\n            };\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_events').insert(event);\n            if (error) {\n                console.warn('Failed to track analytics event:', error);\n            }\n        } catch (error) {\n            console.warn('Analytics tracking failed:', error);\n        }\n    }\n    /**\n   * Track model performance metrics\n   */ async trackModelPerformance(userId, conversationId, model, metrics) {\n        try {\n            const performance = {\n                user_id: userId,\n                conversation_id: conversationId,\n                model,\n                prompt_tokens: metrics.promptTokens,\n                completion_tokens: metrics.completionTokens,\n                total_tokens: metrics.totalTokens,\n                response_time_ms: metrics.responseTimeMs,\n                cost_cents: metrics.costCents,\n                success: metrics.success,\n                error_message: metrics.errorMessage\n            };\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('model_performance').insert(performance);\n            if (error) {\n                console.warn('Failed to track model performance:', error);\n            }\n        } catch (error) {\n            console.warn('Model performance tracking failed:', error);\n        }\n    }\n    /**\n   * Update user engagement metrics\n   */ async updateUserEngagement(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // First, try to update existing record\n            const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').update({\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('user_id', userId).eq('date', today);\n            if (updateError) {\n                // If no existing record, create one\n                const engagement = {\n                    user_id: userId,\n                    date: today,\n                    messages_sent: 0,\n                    conversations_created: 0,\n                    session_duration_minutes: 0,\n                    models_used: [],\n                    features_used: [],\n                    last_activity: new Date().toISOString()\n                };\n                const { error: insertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').insert(engagement);\n                if (insertError) {\n                    console.warn('Failed to create user engagement record:', insertError);\n                }\n            }\n        } catch (error) {\n            console.warn('User engagement update failed:', error);\n        }\n    }\n    /**\n   * Increment message count for user\n   */ async incrementMessageCount(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current value\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('messages_sent').eq('user_id', userId).eq('date', today).single();\n            const currentCount = (currentData === null || currentData === void 0 ? void 0 : currentData.messages_sent) || 0;\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                messages_sent: currentCount + 1,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to increment message count:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Message count increment failed:', error);\n        }\n    }\n    /**\n   * Increment conversation count for user\n   */ async incrementConversationCount(userId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current value\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('conversations_created').eq('user_id', userId).eq('date', today).single();\n            const currentCount = (currentData === null || currentData === void 0 ? void 0 : currentData.conversations_created) || 0;\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                conversations_created: currentCount + 1,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to increment conversation count:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Conversation count increment failed:', error);\n        }\n    }\n    /**\n   * Track model usage for user\n   */ async trackModelUsage(userId, model) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current models_used array\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('models_used').eq('user_id', userId).eq('date', today).single();\n            if (fetchError && fetchError.code !== 'PGRST116') {\n                console.warn('Failed to fetch current model usage:', fetchError);\n                return;\n            }\n            const currentModels = (currentData === null || currentData === void 0 ? void 0 : currentData.models_used) || [];\n            const updatedModels = Array.from(new Set([\n                ...currentModels,\n                model\n            ]));\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                models_used: updatedModels,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to track model usage:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Model usage tracking failed:', error);\n        }\n    }\n    /**\n   * Track feature usage\n   */ async trackFeatureUsage(userId, feature) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get current features_used array\n            const { data: currentData, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select('features_used').eq('user_id', userId).eq('date', today).single();\n            if (fetchError && fetchError.code !== 'PGRST116') {\n                console.warn('Failed to fetch current feature usage:', fetchError);\n                return;\n            }\n            const currentFeatures = (currentData === null || currentData === void 0 ? void 0 : currentData.features_used) || [];\n            const updatedFeatures = Array.from(new Set([\n                ...currentFeatures,\n                feature\n            ]));\n            // Update or insert\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').upsert({\n                user_id: userId,\n                date: today,\n                features_used: updatedFeatures,\n                last_activity: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,date'\n            });\n            if (upsertError) {\n                console.warn('Failed to track feature usage:', upsertError);\n            }\n        } catch (error) {\n            console.warn('Feature usage tracking failed:', error);\n        }\n    }\n    /**\n   * Get analytics data for admin dashboard\n   */ async getAnalyticsData(dateRange) {\n        try {\n            // Get daily metrics\n            const { data: metrics, error: metricsError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_metrics').select('*').gte('date', dateRange.start).lte('date', dateRange.end).order('date', {\n                ascending: false\n            });\n            if (metricsError) throw metricsError;\n            // Get recent events\n            const { data: events, error: eventsError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analytics_events').select(\"\\n          *,\\n          users:user_id (\\n            email,\\n            full_name\\n          )\\n        \").gte('created_at', dateRange.start).lte('created_at', dateRange.end).order('created_at', {\n                ascending: false\n            }).limit(100);\n            if (eventsError) throw eventsError;\n            // Get model performance data\n            const { data: performance, error: performanceError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('model_performance').select('*').gte('created_at', dateRange.start).lte('created_at', dateRange.end).order('created_at', {\n                ascending: false\n            });\n            if (performanceError) throw performanceError;\n            // Get user engagement data\n            const { data: engagement, error: engagementError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('user_engagement').select(\"\\n          *,\\n          users:user_id (\\n            email,\\n            full_name\\n          )\\n        \").gte('date', dateRange.start).lte('date', dateRange.end).order('date', {\n                ascending: false\n            });\n            if (engagementError) throw engagementError;\n            return {\n                metrics: metrics || [],\n                events: events || [],\n                performance: performance || [],\n                engagement: engagement || []\n            };\n        } catch (error) {\n            console.error('Failed to fetch analytics data:', error);\n            throw error;\n        }\n    }\n    constructor(){\n        // Generate a session ID for this browser session\n        this.sessionId = this.getOrCreateSessionId();\n    }\n}\nconst analyticsService = new AnalyticsService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/analyticsService.ts\n"));

/***/ })

}]);