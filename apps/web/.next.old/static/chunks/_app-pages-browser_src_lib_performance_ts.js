"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_performance_ts"],{

/***/ "(app-pages-browser)/./src/lib/performance.ts":
/*!********************************!*\
  !*** ./src/lib/performance.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERFORMANCE_BUDGETS: () => (/* binding */ PERFORMANCE_BUDGETS),\n/* harmony export */   checkPerformanceBudgets: () => (/* binding */ checkPerformanceBudgets),\n/* harmony export */   createIntersectionObserver: () => (/* binding */ createIntersectionObserver),\n/* harmony export */   debouncedPerformanceLog: () => (/* binding */ debouncedPerformanceLog),\n/* harmony export */   getOptimizedImageUrl: () => (/* binding */ getOptimizedImageUrl),\n/* harmony export */   initPerformanceMonitoring: () => (/* binding */ initPerformanceMonitoring),\n/* harmony export */   logBundleSize: () => (/* binding */ logBundleSize),\n/* harmony export */   monitorCachePerformance: () => (/* binding */ monitorCachePerformance),\n/* harmony export */   monitorMemoryUsage: () => (/* binding */ monitorMemoryUsage),\n/* harmony export */   monitorNetworkRequests: () => (/* binding */ monitorNetworkRequests),\n/* harmony export */   monitorServiceWorker: () => (/* binding */ monitorServiceWorker),\n/* harmony export */   preloadCriticalResources: () => (/* binding */ preloadCriticalResources),\n/* harmony export */   preloadResource: () => (/* binding */ preloadResource),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   trackBundleSize: () => (/* binding */ trackBundleSize)\n/* harmony export */ });\n/**\n * Performance optimization utilities for PWA\n */ // Core Web Vitals tracking\nfunction reportWebVitals(metric) {\n    // Log to console in development\n    if (true) {\n        console.log('Web Vital:', metric);\n    }\n    // Send to analytics in production\n    if (false) {}\n}\n// Image optimization helper\nfunction getOptimizedImageUrl(src, width, height) {\n    // Use Next.js Image optimization or a CDN\n    const params = new URLSearchParams({\n        url: src,\n        w: width.toString(),\n        ...height && {\n            h: height.toString()\n        },\n        q: '75',\n        f: 'webp' // Format\n    });\n    return \"/api/image?\".concat(params);\n}\n// Bundle size monitoring\nfunction logBundleSize() {\n    if ( true && 'performance' in window) {\n        // Log bundle size information\n        const resources = performance.getEntriesByType('resource');\n        const scripts = resources.filter((r)=>r.name.includes('.js'));\n        scripts.forEach((script)=>{\n            if (script.transferSize > 0) {\n                console.log(\"Bundle: \".concat(script.name, \" - \").concat((script.transferSize / 1024).toFixed(2), \"KB\"));\n            }\n        });\n    }\n}\n// Alias for backward compatibility\nconst trackBundleSize = logBundleSize;\n// Memory usage monitoring\nfunction monitorMemoryUsage() {\n    if ('memory' in performance) {\n        const memInfo = performance.memory;\n        console.log('Memory Usage:', {\n            used: Math.round(memInfo.usedJSHeapSize / 1048576 * 100) / 100 + ' MB',\n            total: Math.round(memInfo.totalJSHeapSize / 1048576 * 100) / 100 + ' MB',\n            limit: Math.round(memInfo.jsHeapSizeLimit / 1048576 * 100) / 100 + ' MB'\n        });\n    }\n}\n// Lazy loading with intersection observer\nfunction createIntersectionObserver(callback, options) {\n    if ( true && 'IntersectionObserver' in window) {\n        return new IntersectionObserver(callback, {\n            rootMargin: '50px',\n            threshold: 0.1,\n            ...options\n        });\n    }\n    return null;\n}\n// Debounced performance logging\nlet logTimeout;\nfunction debouncedPerformanceLog(message, data) {\n    clearTimeout(logTimeout);\n    logTimeout = setTimeout(()=>{\n        console.log(\"[Performance] \".concat(message), data);\n    }, 100);\n}\n// Resource preloading\nfunction preloadResource(href, as, type) {\n    if (typeof document !== 'undefined') {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.href = href;\n        link.as = as;\n        if (type) link.type = type;\n        document.head.appendChild(link);\n    }\n}\n// Critical resource preloading\nfunction preloadCriticalResources() {\n    // Preload critical fonts\n    preloadResource('/fonts/inter-var.woff2', 'font', 'font/woff2');\n    // Preload critical CSS\n    preloadResource('/_next/static/css/app.css', 'style');\n    // Preload critical JS\n    preloadResource('/_next/static/js/main.js', 'script');\n}\n// Service worker performance monitoring\nfunction monitorServiceWorker() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.addEventListener('message', (event)=>{\n            var _event_data;\n            if (((_event_data = event.data) === null || _event_data === void 0 ? void 0 : _event_data.type) === 'PERFORMANCE_METRIC') {\n                console.log('SW Performance:', event.data.metric);\n            }\n        });\n    }\n}\n// Cache performance monitoring\nfunction monitorCachePerformance() {\n    if ('caches' in window) {\n        caches.keys().then((cacheNames)=>{\n            cacheNames.forEach(async (cacheName)=>{\n                const cache = await caches.open(cacheName);\n                const keys = await cache.keys();\n                console.log(\"Cache \".concat(cacheName, \": \").concat(keys.length, \" items\"));\n            });\n        });\n    }\n}\n// Network request monitoring\nfunction monitorNetworkRequests() {\n    if ('PerformanceObserver' in window) {\n        const observer = new PerformanceObserver((list)=>{\n            for (const entry of list.getEntries()){\n                if (entry.entryType === 'resource') {\n                    const resourceEntry = entry;\n                    // Log slow network requests\n                    if (resourceEntry.responseEnd - resourceEntry.requestStart > 1000) {\n                        console.warn('Slow network request:', {\n                            url: resourceEntry.name,\n                            duration: resourceEntry.responseEnd - resourceEntry.requestStart,\n                            size: resourceEntry.transferSize\n                        });\n                    }\n                }\n            }\n        });\n        observer.observe({\n            entryTypes: [\n                'resource'\n            ]\n        });\n    }\n}\n// Initialize all performance monitoring\nfunction initPerformanceMonitoring() {\n    if (false) {}\n    // Preload critical resources\n    preloadCriticalResources();\n    // Monitor service worker\n    monitorServiceWorker();\n    // Monitor cache performance\n    monitorCachePerformance();\n    // Monitor network requests\n    monitorNetworkRequests();\n    // Log bundle sizes\n    logBundleSize();\n    // Monitor memory usage periodically\n    setInterval(monitorMemoryUsage, 30000);\n}\n// Performance budget checking\nconst PERFORMANCE_BUDGETS = {\n    // Bundle sizes\n    main: 200 * 1024,\n    vendor: 300 * 1024,\n    total: 500 * 1024,\n    // Web Vitals\n    lcp: 2500,\n    fid: 100,\n    cls: 0.1,\n    // Network\n    ttfb: 800,\n    fcp: 1800 // 1.8s\n};\nfunction checkPerformanceBudgets() {\n    if (false) {}\n    // Check bundle sizes\n    const resources = performance.getEntriesByType('resource');\n    const scripts = resources.filter((r)=>r.name.includes('.js'));\n    scripts.forEach((script)=>{\n        const size = script.transferSize;\n        if (size > PERFORMANCE_BUDGETS.main) {\n            console.warn(\"Bundle size exceeds budget: \".concat(script.name, \" (\").concat((size / 1024).toFixed(2), \"KB)\"));\n        }\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/performance.ts\n"));

/***/ })

}]);